#!/usr/bin/env node


if (process.env.NODE_ENV === "develop") {
    start(0);
    return
}

const cluster = require('cluster')

if (cluster.isMaster) {
    const cpuCount = process.env.WEB_CONCURRENCY || 1

    console.log("NNNNumber of CPUs available for us are: " + cpuCount)

    for (let i = 0; i < cpuCount; i++) {
        cluster.fork()
    }

    cluster.on('exit', function (worker) {
        console.log('Worker %d died :(', worker.id)
        cluster.fork()
    })
} else {
    start(cluster.worker.id)
}

function start(id) {
    //module dependencies
    var server = require("../dist/Server");
    var debug = require("debug")("express:server");
    var http = require("http");

    //create http server
    var httpPort = normalizePort(process.env.PORT || 3090);
    var app = server.Server.run().app;
    app.set("port", httpPort);
    var httpServer = http.createServer(app);

    //listen on provided ports
    httpServer.listen(httpPort);

    //add error handler
    httpServer.on("error", onError);

    //start listening on port
    httpServer.on("listening", onListening);

    /**
     * Normalize a port into a number, string, or false.
     */
    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */
    function onError(error) {
        if (error.syscall !== "listen") {
            throw error;
        }

        var bind = typeof port === "string"
            ? "Pipe " + port
            : "Port " + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case "EACCES":
                console.error(bind + " requires elevated privileges");
                process.exit(1);
                break;
            case "EADDRINUSE":
                console.error(bind + " is already in use");
                process.exit(1);
                break;
            default:
                throw error;
        }
    }
    /**
     * Event listener for HTTP server "listening" event.
     */
    function onListening() {
        var addr = httpServer.address();
        var bind = typeof addr === "string"
            ? "pipe " + addr
            : "port " + addr.port;
        debug("Listening on " + bind);
        console.log("Listening on " + bind);

    }
}
